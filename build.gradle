/* SPDX-License-Identifier: Apache-2.0 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    }
}

plugins {
    id 'java'
    id "jvm-test-suite"
    id "maven-publish"
    id "signing"
    id "io.freefair.lombok" version "6.3.0"
    id "com.diffplug.spotless" version "6.4.0"
    id "net.ltgt.errorprone" version "2.0.2"
    id "org.ajoberstar.git-publish" version "3.0.1"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
group 'com.atlan'
version '1.1.0-SNAPSHOT'

tasks.withType(JavaCompile) {
    options.release = project.targetCompatibility.majorVersion as Integer

    options.compilerArgs << "-Xlint:all" << "-Xlint:-options" << "-Xlint:-processing"
    options.encoding = "UTF-8"

    options.errorprone {
        // Yes, it does behave in strange ways, but nonetheless is still useful...
        disable("StringSplitter")

        // Some methods in autogen'd files (defined via overrides) lack a summary. Should be trivial
        // to fix by adding the missing summaries.
        disable("MissingSummary")

        // This check is disabled because multiple nested classes may have the same name in a given
        // file. (In particular the EqualsAndHashCode from Lombok will create this in many places.)
        disable("SameNameButDifferent")

        // This check is disabled because of how we have object-based inheritance setup, and the
        // inability of Lombok to generate Overrides on its generated builder-related methods.
        disable("MissingOverride")

        // This check is disabled because of how Lombok works with SuperBuilder and the
        // AtlanObject base class not actually containing any members, yet Lombok requiring
        // the annotation here for all inherited classes to work.
        disable("UnusedVariable")

        // Disable checks in generated code since Lombok does some things that error-prone
        // may not like (and may even cause error-prone itself to fail out with exceptions
        // during its analysis process). For example, combining @SuperBuilder and @Singular
        // annotations...
        disableWarningsInGeneratedCode = true
    }
}

compileJava {
    options.compilerArgs << "-Werror"
}

repositories {
    mavenCentral {
        mavenContent {
            releasesOnly()
        }
    }
    maven {
        url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        mavenContent {
            snapshotsOnly()
        }
    }
}

dependencies {
    errorprone group: "com.google.errorprone", name: "error_prone_core", version: "2.14.0"
    errorproneJavac group: "com.google.errorprone", name: "javac", version:"9+181-r4173-1"
    implementation group: "com.atlan", name: "atlan-java", "version": "0.6.0"
    implementation "io.numaproj.numaflow:numaflow-java:0.4.6"
    implementation group: "org.slf4j", name: "slf4j-api", version: "1.7.32"
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    implementation platform('software.amazon.awssdk:bom:2.18.21')
    implementation 'software.amazon.awssdk:s3:2.18.24'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
    implementation 'io.swagger.parser.v3:swagger-parser:2.1.12'
    runtimeOnly group: 'ch.qos.logback', name: 'logback-core', version: '1.2.11'
    runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
}

jar {
    manifest {
        attributes("Implementation-Title": POM_NAME,
                "Implementation-Version": VERSION_NAME,
                "Implementation-Vendor": VENDOR_NAME,
                "Bundle-SymbolicName": POM_ARTIFACT_ID,
                "Export-Package": "com.atlan.*")

        archiveVersion = VERSION_NAME
    }
}

lombok {
    version = "1.18.24"
}

delombok {
    // empty format option, otherwise the default is to use pretty formatting which overrides
    // options Lombok config options and does not add generated annotations.
    format = [:]
}

apply from: "deploy.gradle"

spotless {
    java {
        palantirJavaFormat("2.9.0")
        removeUnusedImports()
        licenseHeaderFile('LICENSE_HEADER')
    }
}

shadowJar {
    archiveClassifier = 'jar-with-dependencies'
    dependencies {
        include(dependency('ch.qos.logback:logback-classic:.*'))
        include(dependency('ch.qos.logback:logback-core:.*'))
    }
}

task openApiJar(type: Jar) {
    manifest {
        attributes("Main-Class": "com.atlan.samples.loaders.OpenAPISpecLoader")
    }
}

shadowJar {
    archiveClassifier = 'openapi-loader'
    dependencies {
        include(dependency('com.atlan:atlan-java:.*'))
        include(dependency('io.swagger.core.v3:swagger-models:.*'))
        include(dependency('io.swagger.core.v3:swagger-annotations:.*'))
        include(dependency('io.swagger.core.v3:swagger-core:.*'))
        include(dependency('io.swagger.parser.v3:swagger-parser-core:.*'))
        include(dependency('io.swagger.parser.v3:swagger-parser-safe-url-resolver:.*'))
        include(dependency('io.swagger.parser.v3:swagger-parser:.*'))
        include(dependency('io.swagger.parser.v3:swagger-parser-v2-converter:.*'))
        include(dependency('io.swagger.parser.v3:swagger-parser-v3:.*'))
        include(dependency('io.swagger:swagger-core:.*'))
        include(dependency('io.swagger:swagger-compat-spec-parser:.*'))
        include(dependency('io.swagger:swagger-annotations:.*'))
        include(dependency('io.swagger:swagger-models:.*'))
        include(dependency('io.swagger:swagger-parser:.*'))
        include(dependency('org.apache.commons:commons-lang3:.*'))
        include(dependency('commons-io:commons-io:.*'))
        include(dependency('com.fasterxml.jackson.core:jackson-core:.*'))
        include(dependency('com.fasterxml.jackson.core:jackson-annotations:.*'))
        include(dependency('com.fasterxml.jackson.core:jackson-databind:.*'))
        include(dependency('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:.*'))
        include(dependency('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:.*'))
        include(dependency('org.yaml:snakeyaml:.*'))
        include(dependency('software.amazon.awssdk:s3:.*'))
        include(dependency('software.amazon.awssdk:regions:.*'))
        include(dependency('software.amazon.awssdk:utils:.*'))
        include(dependency('com.amazonaws:aws-lambda-java-core:.*'))
        include(dependency('co.elastic.clients:elasticsearch-java:.*'))
        include(dependency('org.elasticsearch.client:elasticsearch-rest-client:.*'))
        include(dependency('jakarta.json:jakarta.json-api:.*'))
        include(dependency('jakarta.xml.bind:jakarta.xml.bind-api:.*'))
        include(dependency('jakarta.activation:jakarta.activation-api:.*'))
        include(dependency('jakarta.validation:jakarta.validation-api:.*'))
        include(dependency('org.slf4j:slf4j-api:.*'))
        include(dependency('ch.qos.logback:logback-classic:.*'))
        include(dependency('ch.qos.logback:logback-core:.*'))
    }
    manifest {
        inheritFrom(project.tasks.openApiJar.manifest)
    }
}

gitPublish {
    repoUri = 'https://github.com/atlanhq/atlan-java-samples.git'
    branch = 'gh-pages'
    sign = false // disable commit signing

    contents {
        from(javadoc) {
            into '.'
        }
    }
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

task DocumentationTemplateLoader(type: JavaExec) {
    group = "Execution"
    description = "Run the DocumentationTemplateLoader"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.atlan.samples.loaders.DocumentationTemplateLoader"
}

task EnrichmentLoader(type: JavaExec) {
    group = "Execution"
    description = "Run the EnrichmentLoader"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.atlan.samples.loaders.EnrichmentLoader"
}

task OpenAPISpecLoader(type: JavaExec) {
    group = "Execution"
    description = "Run the OpenAPISpecLoader"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.atlan.samples.loaders.OpenAPISpecLoader"
}

task EnrichmentReporter(type: JavaExec) {
    group = "Execution"
    description = "Run the EnrichmentReporter"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.atlan.samples.reporters.EnrichmentReporter"
}

task SlackDiscussionReporter(type: JavaExec) {
    group = "Execution"
    description = "Run the SlackDiscussionReporter"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.atlan.samples.reporters.SlackDiscussionReporter"
}

task UserReporter(type: JavaExec) {
    group = "Execution"
    description = "Run the UserReporter"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.atlan.samples.reporters.UserReporter"
}
